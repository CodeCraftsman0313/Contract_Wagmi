import { ConnectButton } from "@rainbow-me/rainbowkit";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import * as React from "react";
import {
  type BaseError,
  useWaitForTransactionReceipt,
  useWriteContract,
  useAccount,
} from "wagmi";
import TaskAbi from "../abis/TaskAbi";
import { parseAbi, parseUnits } from "viem";

const Home: NextPage = () => {
  const { data: hash, error, isPending, writeContract } = useWriteContract();
  const { address: account } = useAccount();
  const quantity = 1n;
  const pricePerToken = parseUnits("0.1", 18);
  const totalEthToSend = pricePerToken * quantity;

  function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    const receiver = account;
    const quantity = 1n;
    const pricePerToken = parseUnits("0.1", 18);

    const allowlistProof = {
      proof: [],
      quantityLimitPerWallet: 1,
      pricePerToken: pricePerToken,
      currency: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
    };
    const data = "0x";

    const args = [
      receiver,
      quantity,
      "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
      pricePerToken,
      allowlistProof,
      data,
    ];

    writeContract({
      address: "0xb5F7C3918A68339F209A6ED24E0Cd2D7c8d45dD8",
      abi: TaskAbi,
      functionName: "claim",
      args: args,
      value: totalEthToSend,
    });
  }

  const { isLoading: isConfirming, isSuccess: isConfirmed } =
    useWaitForTransactionReceipt({
      hash,
    });

    console.log(error)

  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        <div className="container">
          <div className="stack">
            <form className="set" onSubmit={submit}>
              <input name="tokenId" placeholder="Token ID" required />
              <button disabled={isPending} type="submit">
                {isPending ? "Confirming..." : "Mint"}
              </button>
            </form>
            {hash && <div>Transaction Hash: {hash}</div>}
            {isConfirming && <div>Waiting for confirmation...</div>}
            {isConfirmed && <div>Transaction confirmed.</div>}
            {error && (
              <div>
                Error: {(error as BaseError).shortMessage || error.message}
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
};

export default Home;
